// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  entryNo       String?   @unique
  phone         String?
  department    String?
  course        String?
  socialLink    String?
  isPublicEmail Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  posts    Post[]
  comments Comment[]
  likes    Like[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  chatMembers      ChatMember[]

  @@map("users")
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  authorId  String    @db.ObjectId
  category  String    // "cab", "cycle", "books", "electronics", "games", "coding", "general"
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  postId    String   @db.ObjectId
  authorId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  postId String @db.ObjectId
  userId String @db.ObjectId

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("likes")
}

model AutoDriver {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  phone       String  @unique
  rating      Float   @default(0)
  pricePerKm  Float
  location    String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("autodrivers")
}

model Game {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  type         String   // "physical" or "video"
  availability Boolean  @default(true)
  location     String?
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("games")
}

model Chat {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?  // For group chats
  isGroup   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages    Message[]
  chatMembers ChatMember[]

  @@map("chats")
}

model ChatMember {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  chatId String @db.ObjectId
  userId String @db.ObjectId

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@map("chatmembers")
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  senderId   String   @db.ObjectId
  receiverId String?  @db.ObjectId  // For direct messages
  chatId     String   @db.ObjectId
  createdAt  DateTime @default(now())

  sender   User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User? @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  chat     Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model CollegeProject {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  whatsappLink String?
  websiteLink String?
  category    String   // "btech", "mtech", "phd", "club", "society"
  year        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("collegeprojects")
}

model OTP {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  otp       String
  purpose   String   // "signup", "reset", "verification"
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([email, purpose])
  @@map("otps")
}
